# -*- coding: utf-8 -*-
"""LinearRegression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gRaWjEpL3IaOAibmJvJ9LbFvKGb1ZPAZ
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
from matplotlib import pyplot as plt
# %matplotlib inline
import seaborn as sns
import random

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

df=pd.read_csv("/content/lin_reg_educ_share.csv")

df.head()

df.shape

df.rename(columns={'Unnamed: 0':'district'},inplace=True)

df.head()

plt.scatter(df['literacy rate'],df['poverty rate'])
plt.xlabel("Literacy Rate")
plt.ylabel("Poverty Rate")
plt.title("Literacy Rate Vs Poverty Rate in different districts in Nepal")

df['literacy rate'].corr(df['poverty rate'],method='pearson')

df.tail()

df_2d=df[1:-1]

df_2d.shape

model=LinearRegression()

model.fit(df_2d[['literacy rate']],df_2d[['poverty rate']])

predictions=model.predict(df_2d[['literacy rate']])

df_2d['prediction']=predictions

df_2d.head()

sns.lineplot(x='literacy rate', y='prediction',data=df_2d,color='red')
sns.scatterplot(x='literacy rate',y='poverty rate',data=df_2d)

b=model.intercept_[0]
print(b)
m=model.coef_[0][0]
print(m)

#poverty rate for aaccham
round(m*0.472+b,3	)

#for udaypur
round(m*0.259+b,3)

#predict poverty rate given the household size,nkid06,nkid715,literacy rate
df_predict=df[['hhsize','literacy rate','nkid06','nkid715','district']]
df_y=df[['poverty rate']]

df_predict.shape

df_predict.dropna(inplace=True)

df_predict.isnull().any()

df_predict.drop(columns=['district'],inplace=True)

X_train,X_test,y_train,y_test=train_test_split(df_predict,df_y,test_size=0.20,random_state=42)

X_train.shape,X_test.shape,y_train.shape,y_test.shape

model=LinearRegression()

model.fit(X_train,y_train)

predictions=model.predict(X_test)

df_compare=X_test.reset_index(drop=True)

df_compare['Actual']=y_test.values

df_compare['Predicted']=predictions
df_compare.drop(columns=['Prediction'],inplace=True)

df_compare.head()

df_compare.info()

sns.scatterplot(x='Actual',y='Predicted',data=df_compare)

df_compare['Residuals']=df_compare['Actual']-df_compare['Predicted']

sns.scatterplot(x='Predicted',y='Residuals',data=df_compare)

